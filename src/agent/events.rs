use serde::Serialize;
use thiserror::Error;

use super::error::AgentError;
use crate::{
    message::ToolMessage,
    response::{ToolCall, Usage},
};

/// Event variants emitted during agent execution
#[derive(Debug, Clone, Serialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum AgentEvent {
    /// Emitted once at the beginning of the agent's execution
    AgentStart,

    /// A chunk of text generated by the language model
    TextChunk { delta: String },

    /// The language model has requested a tool call.
    /// This is emitted after the model's response stream finishes for that turn
    /// and the full tool call details are assembled.
    ToolCallRequested { tool_call: ToolCall },

    /// The result of a tool execution. Contains the content returned by the tool.
    /// This is emitted after the agent successfully invokes the tool.
    ToolResult { message: ToolMessage },

    /// Emitted when the final LLM turn finishes, includes usage stats if available
    StreamEnd { usage: Option<Usage> },

    /// Emitted once when the agent successfully completes its task
    AgentFinish,

    /// Emitted when an error occurs during agent execution. The stream terminates after this.
    AgentError { error: AgentErrorSerializable },
}

/// A serializable representation of AgentError for the stream.
/// Needed because the original AgentError might contain non-serializable types.
#[derive(Debug, Clone, Serialize, Error)]
pub enum AgentErrorSerializable {
    #[error("API request failed: {0}")]
    ApiError(String),

    #[error("Failed to parse JSON response: {0}")]
    JsonParsingError(String),

    #[error("Model response missing or has unexpected format: {0}")]
    ResponseParsingError(String),

    #[error("Agent reached maximum iterations ({limit}) without completing task")]
    MaxIterationsReached { limit: usize },

    #[error("Tool execution failed: {0}")]
    ToolError(String),

    #[error("Internal Agent Error: {0}")]
    InternalError(String),
}

impl From<&AgentError> for AgentErrorSerializable {
    fn from(error: &AgentError) -> Self {
        match error {
            AgentError::ApiError(e) => AgentErrorSerializable::ApiError(e.to_string()),
            AgentError::JsonParsingError(e) => {
                AgentErrorSerializable::JsonParsingError(e.to_string())
            }
            AgentError::ResponseParsingError(s) => {
                AgentErrorSerializable::ResponseParsingError(s.clone())
            }
            AgentError::MaxIterationsReached { limit } => {
                AgentErrorSerializable::MaxIterationsReached { limit: *limit }
            }
            AgentError::ToolError(e) => AgentErrorSerializable::ToolError(e.to_string()),
            AgentError::InternalError(e) => AgentErrorSerializable::InternalError(e.to_string()),
        }
    }
}

impl From<AgentError> for AgentErrorSerializable {
    fn from(error: AgentError) -> Self {
        AgentErrorSerializable::from(&error)
    }
}
